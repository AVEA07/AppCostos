docker run --name dbsigecomysql \
-e MYSQL_ROOT_PASSWORD=citcosto2025 \
-e MYSQL_DATABASE=SIGECO \
-e MYSQL_USER=practicante \
-e MYSQL_PASSWORD=Angel2007 \
-p 3306:3306 \
-d mysql:8.0
# Comando para crear un contenedor MySQL con Docker
# Este comando crea un contenedor llamado dbsigecomysql con las credenciales y configur
docker run --name dbsigecomysql
-e MYSQL_ROOT_PASSWORD=citcosto2025
-e MYSQL_DATABASE=SIGECO
-e MYSQL_USER=practicante
-e MYSQL_PASSWORD=Angel2007
-p 3306:3306
-d mysql:8.0

# Creacion de contenedor mysql
docker run --name dbsigecomysql -e MYSQL_ROOT_PASSWORD=citcostos2025 -e MYSQL_DATABASE=SIGECO -e MYSQL_USER=practicante -e MYSQL_PASSWORD=Angel2007 -p 3306:3306 -d mysql:8.0

# Entrar al contenedor MySQL
docker exec -it dbsigecomysql mysql -upracticante -pAngel2007 SIGECO

databases: SIGECO;
user: practicante;
password: Angel2007;

CREATE TABLE rangos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre_rango VARCHAR(50) NOT NULL,
    nivel INT NOT NULL
);

CREATE TABLE usuarios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    apellido VARCHAR(255),
    usuario VARCHAR(50) UNIQUE NOT NULL,
    contrasena VARCHAR(255) NOT NULL,
    rango_id INT,
    correo VARCHAR(100),
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (rango_id) REFERENCES rangos(id)
);

CREATE TABLE proyectos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    descripcion TEXT,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    usuarios_id INT NOT NULL,
    FOREIGN KEY (usuarios_id) REFERENCES usuarios(id) ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE costos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    proyecto_id INT NOT NULL,
    usuarios_id INT NOT NULL,
    nombre_modulo VARCHAR(100) NOT NULL,
    complejidad ENUM('baja', 'media', 'alta') NOT NULL,
    cantidad_programadores INT NOT NULL,
    horas_estimadas DECIMAL(10,2) NOT NULL,
    costo_por_hora DECIMAL(10,2) NOT NULL,
    costo_total DECIMAL(10,2) GENERATED ALWAYS AS (cantidad_programadores * horas_estimadas * costo_por_hora) STORED,
    FOREIGN KEY (proyecto_id) REFERENCES proyectos(id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (usuarios_id) REFERENCES usuarios(id) ON DELETE CASCADE ON UPDATE CASCADE
);



CREATE TABLE historial (
    id INT AUTO_INCREMENT PRIMARY KEY,
    usuario_id INT,
    accion VARCHAR(255),
    fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id)
);

INSERT INTO rangos (nombre_rango, nivel) VALUES
('Soldado de Segunda',1),
('Soldado de Primera',2),
('Cabo',3),
('Sargento Segundo',4),
('Sargento Primero',5),
('Sargento Técnico',6),
('Sargento Mayor',7),
('Subteniente',8),
('Teniente',9),
('Capitán Segundo',10),
('Capitán Primero',11),
('Mayor',12),
('Teniente Coronel',13),
('Coronel',14),
('General Brigadier',15),
('General de División',16);

-- ===========================================================
-- BASE DE DATOS SIGECO - Versión Extendida
-- Creada a partir de tu versión inicial y el nuevo modelo.
-- ===========================================================

CREATE DATABASE IF NOT EXISTS SIGECO;
USE SIGECO;

-- ===========================================================
-- 1. TABLAS BASE EXISTENTES
-- ===========================================================

CREATE TABLE IF NOT EXISTS rangos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre_rango VARCHAR(50) NOT NULL,
    nivel INT NOT NULL
);

CREATE TABLE IF NOT EXISTS usuarios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    apellido VARCHAR(255),
    usuario VARCHAR(50) UNIQUE NOT NULL,
    contrasena VARCHAR(255) NOT NULL,
    rango_id INT,
    correo VARCHAR(100),
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (rango_id) REFERENCES rangos(id)
);

CREATE TABLE IF NOT EXISTS proyectos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    descripcion TEXT,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    usuarios_id INT NOT NULL,
    FOREIGN KEY (usuarios_id) REFERENCES usuarios(id) 
        ON DELETE CASCADE 
        ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS costos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    proyecto_id INT NOT NULL,
    usuarios_id INT NOT NULL,
    nombre_modulo VARCHAR(100) NOT NULL,
    complejidad ENUM('baja', 'media', 'alta') NOT NULL,
    cantidad_programadores INT NOT NULL,
    horas_estimadas DECIMAL(10,2) NOT NULL,
    costo_por_hora DECIMAL(10,2) NOT NULL,
    costo_total DECIMAL(10,2) GENERATED ALWAYS AS (
        cantidad_programadores * horas_estimadas * costo_por_hora
    ) STORED,
    FOREIGN KEY (proyecto_id) REFERENCES proyectos(id) 
        ON DELETE CASCADE 
        ON UPDATE CASCADE,
    FOREIGN KEY (usuarios_id) REFERENCES usuarios(id) 
        ON DELETE CASCADE 
        ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS historial (
    id INT AUTO_INCREMENT PRIMARY KEY,
    usuario_id INT,
    accion VARCHAR(255),
    fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id)
);

-- ===========================================================
-- 2. NUEVAS TABLAS PARA PROGRAMADORES Y TECNOLOGÍAS
-- ===========================================================

CREATE TABLE IF NOT EXISTS programador (
    id INT AUTO_INCREMENT PRIMARY KEY,
    usuarios_id INT NOT NULL,
    costo_hora DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (usuarios_id) REFERENCES usuarios(id) 
        ON DELETE CASCADE 
        ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS tecnologia (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL
);

CREATE TABLE IF NOT EXISTS skill (
    id INT AUTO_INCREMENT PRIMARY KEY,
    tecnologia_id INT NOT NULL,
    nombre VARCHAR(100) NOT NULL,
    FOREIGN KEY (tecnologia_id) REFERENCES tecnologia(id)
);

CREATE TABLE IF NOT EXISTS programador_tecnologia (
    programador_id INT NOT NULL,
    tecnologia_id INT NOT NULL,
    nivel_conocimiento ENUM('bajo', 'medio', 'alto') DEFAULT 'medio',
    PRIMARY KEY (programador_id, tecnologia_id),
    FOREIGN KEY (programador_id) REFERENCES programador(id) 
        ON DELETE CASCADE 
        ON UPDATE CASCADE,
    FOREIGN KEY (tecnologia_id) REFERENCES tecnologia(id)
);

-- ===========================================================
-- 3. PROYECTOS Y MÓDULOS AVANZADOS
-- ===========================================================

CREATE TABLE IF NOT EXISTS complejidad (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nivel VARCHAR(50),
    cantidad_dias INT
);

ALTER TABLE proyectos
ADD COLUMN complejidad_id INT NULL,
ADD FOREIGN KEY (complejidad_id) REFERENCES complejidad(id);

CREATE TABLE IF NOT EXISTS modulo (
    id INT AUTO_INCREMENT PRIMARY KEY,
    proyecto_id INT NOT NULL,
    nombre_modulo VARCHAR(100) NOT NULL,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (proyecto_id) REFERENCES proyectos(id)
);

CREATE TABLE IF NOT EXISTS asignacion_proyecto (
    id INT AUTO_INCREMENT PRIMARY KEY,
    usuarios_id INT NOT NULL,
    proyecto_id INT NOT NULL,
    rol VARCHAR(50),
    horas_trabajadas DECIMAL(10,2),
    FOREIGN KEY (usuarios_id) REFERENCES usuarios(id),
    FOREIGN KEY (proyecto_id) REFERENCES proyectos(id)
);

-- ===========================================================
-- 4. DOCUMENTACIÓN
-- ===========================================================

CREATE TABLE IF NOT EXISTS tipo_documentacion (
    id INT AUTO_INCREMENT PRIMARY KEY,
    tipo_documentacion VARCHAR(100) NOT NULL
);

CREATE TABLE IF NOT EXISTS documentacion (
    id INT AUTO_INCREMENT PRIMARY KEY,
    proyecto_id INT NOT NULL,
    titulo VARCHAR(255) NOT NULL,
    ruta_archivo VARCHAR(255),
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (proyecto_id) REFERENCES proyectos(id)
);

CREATE TABLE IF NOT EXISTS asignacion_documentacion (
    id INT AUTO_INCREMENT PRIMARY KEY,
    proyecto_id INT NOT NULL,
    usuarios_id INT NOT NULL,
    rol VARCHAR(100),
    horas_trabajadas DECIMAL(10,2),
    tipo_documentacion_id INT,
    FOREIGN KEY (proyecto_id) REFERENCES proyectos(id),
    FOREIGN KEY (usuarios_id) REFERENCES usuarios(id),
    FOREIGN KEY (tipo_documentacion_id) REFERENCES tipo_documentacion(id)
);

-- ===========================================================
-- 5. ALMACENAMIENTO Y HOSTING
-- ===========================================================

CREATE TABLE IF NOT EXISTS tipo_host (
    id INT AUTO_INCREMENT PRIMARY KEY,
    tipo_host VARCHAR(100) NOT NULL
);

CREATE TABLE IF NOT EXISTS nombre_host (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    tipo_host_id INT,
    costo DECIMAL(10,2),
    FOREIGN KEY (tipo_host_id) REFERENCES tipo_host(id)
);

CREATE TABLE IF NOT EXISTS almacenamiento (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre_host_id INT,
    detalles TEXT,
    FOREIGN KEY (nombre_host_id) REFERENCES nombre_host(id)
);

-- ===========================================================
-- 6. CAPACITACIÓN Y SEGUIMIENTO
-- ===========================================================

CREATE TABLE IF NOT EXISTS modalidad (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100),
    porcentaje DECIMAL(5,2)
);

CREATE TABLE IF NOT EXISTS tipo_cobro (
    id INT AUTO_INCREMENT PRIMARY KEY,
    cobro VARCHAR(100),
    tarifa DECIMAL(10,2)
);

CREATE TABLE IF NOT EXISTS capacitacion (
    id INT AUTO_INCREMENT PRIMARY KEY,
    proyecto_id INT NOT NULL,
    tipo_cobro_id INT,
    duracion INT,
    horas_dia INT,
    modalidad_id INT,
    logistica TEXT,
    fecha_inicio DATE,
    fecha_finalizacion DATE,
    costo_total DECIMAL(10,2),
    FOREIGN KEY (proyecto_id) REFERENCES proyectos(id),
    FOREIGN KEY (tipo_cobro_id) REFERENCES tipo_cobro(id),
    FOREIGN KEY (modalidad_id) REFERENCES modalidad(id)
);

CREATE TABLE IF NOT EXISTS asignacion_capacitacion (
    capacitacion_id INT NOT NULL,
    usuarios_id INT NOT NULL,
    rol VARCHAR(100),
    horas_trabajadas DECIMAL(10,2),
    PRIMARY KEY (capacitacion_id, usuarios_id),
    FOREIGN KEY (capacitacion_id) REFERENCES capacitacion(id),
    FOREIGN KEY (usuarios_id) REFERENCES usuarios(id)
);

CREATE TABLE IF NOT EXISTS seguimiento (
    id INT AUTO_INCREMENT PRIMARY KEY,
    capacitacion_id INT,
    tipo VARCHAR(100),
    tipo_cobro_id INT,
    duracion_horas DECIMAL(10,2),
    FOREIGN KEY (capacitacion_id) REFERENCES capacitacion(id),
    FOREIGN KEY (tipo_cobro_id) REFERENCES tipo_cobro(id)
);

-- ===========================================================
-- 7. REINSERCIÓN DE DATOS EXISTENTES (rangos)
-- ===========================================================

INSERT INTO rangos (nombre_rango, nivel) VALUES
('Soldado de Segunda',1),
('Soldado de Primera',2),
('Cabo',3),
('Sargento Segundo',4),
('Sargento Primero',5),
('Sargento Técnico',6),
('Sargento Mayor',7),
('Subteniente',8),
('Teniente',9),
('Capitán Segundo',10),
('Capitán Primero',11),
('Mayor',12),
('Teniente Coronel',13),
('Coronel',14),
('General Brigadier',15),
('General de División',16);








INSERT INTO usuarios(nombre,usuario, contrasena, rango_id, correo)
VALUES ('Angel Emanuel Villafuerte Azanon','Practicante','practicante2025',2,'angelvillaz456@gmail.com');

INSERT INTO proyectos(nombre, descripcion, usuario_id)
VALUES ('SIGECO','Aplicacion creda con el proposito de facilitar los costos de un proyecto',1);

INSERT INTO costos(proyecto_id,nombre_modulo,complejidad,horas_estimadas,costo_por_hora)
VALUES (1,'SIGECO','media',80,130);

INSERT INTO historial (usuario_id, accion)
VALUES (1,'ingreso de presupuesto de aplicacion');

ALTER TABLE usuarios ADD COLUMN apellido VARCHAR(255) AFTER nombre;

ALTER TABLE costos ADD COLUMN usuarios_id INT AFTER proyecto_id;
ALTER TABLE costos ADD FOREIGN KEY (usuarios_id) REFERENCES usuarios(id);
















CREATE DATABASE IF NOT EXISTS SIGECO;
USE SIGECO;

-- 1. Rango
CREATE TABLE rango (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre_rango VARCHAR(50) NOT NULL,
    nivel INT NOT NULL
);

-- 2. Usuarios
CREATE TABLE usuarios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    apellido VARCHAR(100),
    usuario VARCHAR(50) UNIQUE NOT NULL,
    contrasena VARCHAR(255) NOT NULL,
    rango_id INT,
    correo VARCHAR(100),
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (rango_id) REFERENCES rango(id)
);

-- 3. Programador
CREATE TABLE programador (
    id INT AUTO_INCREMENT PRIMARY KEY,
    usuarios_id INT NOT NULL,
    costo_hora DECIMAL(10,2),
    FOREIGN KEY (usuarios_id) REFERENCES usuarios(id)
);

-- 4. Tecnologia
CREATE TABLE tecnologia (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    suma_porcentaje DECIMAL(5,2) DEFAULT 0
);

-- 5. Skill
CREATE TABLE skill (
    id INT AUTO_INCREMENT PRIMARY KEY,
    tecnologia_id INT NOT NULL,
    nombre VARCHAR(100) NOT NULL,
    suma_porcentaje DECIMAL(5,2) DEFAULT 0,
    FOREIGN KEY (tecnologia_id) REFERENCES tecnologia(id)
);

-- 6. Programador_Tecnologia (muchos a muchos)
CREATE TABLE programador_tecnologia (
    programador_id INT NOT NULL,
    tecnologia_id INT NOT NULL,
    nivel_conocimiento VARCHAR(50),
    PRIMARY KEY (programador_id, tecnologia_id),
    FOREIGN KEY (programador_id) REFERENCES programador(id),
    FOREIGN KEY (tecnologia_id) REFERENCES tecnologia(id)
);

-- 7. Complejidad
CREATE TABLE complejidad (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nivel ENUM('baja','media','alta') NOT NULL,
    cantidad_dias INT
);

-- 8. Proyecto
CREATE TABLE proyecto (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre_proyecto VARCHAR(100) NOT NULL,
    descripcion TEXT,
    complejidad_id INT,
    fecha_inicializacion DATE,
    FOREIGN KEY (complejidad_id) REFERENCES complejidad(id)
);

-- 9. Modulo
CREATE TABLE modulo (
    id INT AUTO_INCREMENT PRIMARY KEY,
    proyecto_id INT NOT NULL,
    nombre_modulo VARCHAR(100) NOT NULL,
    fecha_creacion DATE,
    FOREIGN KEY (proyecto_id) REFERENCES proyecto(id)
);

-- 10. Asignacion_Proyecto
CREATE TABLE asignacion_proyecto (
    id INT AUTO_INCREMENT PRIMARY KEY,
    usuarios_id INT NOT NULL,
    proyecto_id INT NOT NULL,
    horas_trabajadas DECIMAL(10,2),
    FOREIGN KEY (usuarios_id) REFERENCES usuarios(id),
    FOREIGN KEY (proyecto_id) REFERENCES proyecto(id)
);

-- 11. Tipo_Host
CREATE TABLE tipo_host (
    id INT AUTO_INCREMENT PRIMARY KEY,
    tipo_host VARCHAR(100) NOT NULL
);

-- 12. Nombre_Host
CREATE TABLE nombre_host (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    tipo_host_id INT NOT NULL,
    costo DECIMAL(10,2),
    FOREIGN KEY (tipo_host_id) REFERENCES tipo_host(id)
);

-- 13. Almacenamiento
CREATE TABLE almacenamiento (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre_host_id INT NOT NULL,
    detalles TEXT,
    FOREIGN KEY (nombre_host_id) REFERENCES nombre_host(id)
);

-- 14. Tipo_Documentacion
CREATE TABLE tipo_documentacion (
    id INT AUTO_INCREMENT PRIMARY KEY,
    tipo_documentacion VARCHAR(50) NOT NULL
);

-- 15. Documentacion
CREATE TABLE documentacion (
    proyecto_id INT PRIMARY KEY,
    titulo VARCHAR(100) NOT NULL,
    ruta_archivo VARCHAR(255),
    fecha_creacion DATE,
    FOREIGN KEY (proyecto_id) REFERENCES proyecto(id)
);

-- 16. Asignacion_Documentacion
CREATE TABLE asignacion_documentacion (
    id INT AUTO_INCREMENT PRIMARY KEY,
    proyecto_id INT NOT NULL,
    usuarios_id INT NOT NULL,
    rol VARCHAR(50),
    horas_trabajadas DECIMAL(10,2),
    tipo_documentacion_id INT,
    FOREIGN KEY (proyecto_id) REFERENCES proyecto(id),
    FOREIGN KEY (usuarios_id) REFERENCES usuarios(id),
    FOREIGN KEY (tipo_documentacion_id) REFERENCES tipo_documentacion(id)
);

-- 17. Tipo_Cobro
CREATE TABLE tipo_cobro (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL,
    tarifa DECIMAL(10,2)
);

-- 18. Modalidad
CREATE TABLE modalidad (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL,
    porcentaje DECIMAL(5,2) DEFAULT 0
);

-- 19. Capacitacion
CREATE TABLE capacitacion (
    proyecto_id INT PRIMARY KEY,
    tipo_cobro_id INT,
    duracion DECIMAL(10,2),
    horas_dia DECIMAL(5,2),
    modalidad_id INT,
    logistica DECIMAL(10,2),
    fecha_inicio DATE,
    fecha_finalizacion DATE,
    FOREIGN KEY (proyecto_id) REFERENCES proyecto(id),
    FOREIGN KEY (tipo_cobro_id) REFERENCES tipo_cobro(id),
    FOREIGN KEY (modalidad_id) REFERENCES modalidad(id)
);

-- 20. Seguimiento
CREATE TABLE seguimiento (
    id INT AUTO_INCREMENT PRIMARY KEY,
    capacitacion_id INT NOT NULL,
    tipo VARCHAR(50),
    tipo_cobro_id INT,
    duracion_horas DECIMAL(10,2),
    FOREIGN KEY (capacitacion_id) REFERENCES capacitacion(proyecto_id),
    FOREIGN KEY (tipo_cobro_id) REFERENCES tipo_cobro(id)
);

-- 21. Asignacion_Capacitacion
CREATE TABLE asignacion_capacitacion (
    capacitacion_id INT NOT NULL,
    usuarios_id INT NOT NULL,
    rol VARCHAR(50),
    horas_trabajadas DECIMAL(10,2),
    PRIMARY KEY (capacitacion_id, usuarios_id),
    FOREIGN KEY (capacitacion_id) REFERENCES capacitacion(proyecto_id),
    FOREIGN KEY (usuarios_id) REFERENCES usuarios(id)
);

-- 22. Costos
CREATE TABLE costos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    proyecto_id INT NOT NULL,
    almacenamiento_id INT,
    costo_proyecto DECIMAL(15,2),
    fecha_finalizacion DATE,
    FOREIGN KEY (proyecto_id) REFERENCES proyecto(id),
    FOREIGN KEY (almacenamiento_id) REFERENCES almacenamiento(id)
);

INSERT INTO rango (nombre_rango, nivel) VALUES
('Soldado de Segunda',1),
('Soldado de Primera',2),
('Cabo',3),
('Sargento Segundo',4),
('Sargento Primero',5),
('Sargento Tecnico',6),
('Sargento Mayor',7),
('Subteniente',8),
('Teniente',9),
('Capitan Segundo',10),
('Capitan Primero',11),
('Mayor',12),
('Teniente Coronel',13),
('Coronel',14),
('General de Brigada',15),
('General de Division',16);









